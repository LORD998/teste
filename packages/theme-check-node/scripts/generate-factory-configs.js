const fs = require('fs/promises');
const path = require('path');
const yaml = require('yaml');
const {
  allChecks,
  ConfigTarget,
  CheckDefinition,
  SourceCodeType,
  recommended,
} = require('@shopify/theme-check-common');

const destination = path.resolve(__dirname, '..', 'configs');

const autogeneratedWarning = `# WARNING:
# This file was generated automatically by running "scripts/generate-factory-configs"
# Do not modify manually. Your changes will be overwritten.`;

const join = (...strings) => strings.join('\n');

const checkHasTargets = (check) => check.meta.targets && check.meta.targets.length;

const alphabetically = (a, b) => {
  return a.meta.code < b.meta.code ? -1 : a.meta.code > b.meta.code ? 1 : 0;
};

const defaultPredicate = () => true;
const isTargetExtension = (check) =>
  check.meta.targets && check.meta.targets.includes(ConfigTarget.ThemeAppExtension);

const isAllChecksDefault = (check) =>
  !check.meta.targets ||
  check.meta.targets.length === 0 ||
  check.meta.targets.includes(ConfigTarget.All);

/**
 * @param checkDefs {CheckDefinition<SourceCodeType>[]}
 * @param isCheckEnabled {(CheckDefinition<SourceCodeType>) => boolean}
 */
function asYaml(checkDefs, isCheckEnabled = defaultPredicate) {
  const checkSettings = {
    ignore: ['node_modules/**'],
  };

  for (const checkDef of checkDefs.sort(alphabetically)) {
    const { code, schema } = checkDef.meta;
    checkSettings[code] = {
      enabled: isCheckEnabled(checkDef),
      severity: checkDef.meta.severity,
    };

    for (const [key, schemaProp] of Object.entries(schema)) {
      checkSettings[code][key] = schemaProp.defaultValue();
    }
  }

  return yaml.stringify(checkSettings);
}

async function run() {
  await fs.writeFile(
    path.join(destination, 'all.yml'),
    join(autogeneratedWarning, asYaml(allChecks, isAllChecksDefault)),
  );
  await fs.writeFile(
    path.join(destination, 'recommended.yml'),
    join(autogeneratedWarning, asYaml(recommended)),
  );

  // Theme App Extension checks can extend the recommended config for most checks
  // Only need to generate a config for checks with target considerations.
  const checksWithTargets = allChecks.filter(checkHasTargets);
  await fs.writeFile(
    path.join(destination, 'theme-app-extension.yml'),
    join(
      autogeneratedWarning,
      'extends: theme-check:recommended',
      'context: app',
      asYaml(checksWithTargets, isTargetExtension),
    ),
  );
}

async function main() {
  let statusCode = 0;
  try {
    await run();
  } catch (e) {
    console.log(e);
    statusCode = 1;
  }
  process.exit(statusCode);
}

main();
